---

# Set hostname on the servers
- name: Set hostname
  hostname:
    name: "{{ inventory_hostname }}"
 

# Turn off the swap
- name: Make the Swap inactive
  command: swapoff -a


# Remove swap setting
- name: Remove Swap entry from /etc/fstab.
  lineinfile:
    dest: /etc/fstab
    regexp: swap
    state: absent


# Remove old swap file
- name: Delete old swap file
  file:
    state: absent
    path: /swap.img


# Containerd
- name: Create a empty file for containerd module.
  copy:
    content: ""
    dest: /etc/modules-load.d/containerd.conf
    force: no
 

# Configure containerd
- name: Configure module for containerd.
  blockinfile:
    path: /etc/modules-load.d/containerd.conf
    block: |
      overlay
      br_netfilter

 
# CRI settings
- name: Create a empty file for kubernetes sysctl params.
  copy:
    content: ""
    dest: /etc/sysctl.d/99-kubernetes-cri.conf
    force: no


# CRI settings
- name: Configure sysctl params for Kubernetes.
  lineinfile:
    path: /etc/sysctl.d/99-kubernetes-cri.conf
    line: "{{ item }}"
  with_items:
    - 'net.bridge.bridge-nf-call-iptables = 1'
    - 'net.ipv4.ip_forward = 1'
    - 'net.bridge.bridge-nf-call-ip6tables = 1'

 
# CRI settings
- name: Apply sysctl params without reboot.
  command: sysctl --system


# Update apt-cache
- name: Run the equivalent of "apt-get update"
  apt:
    update_cache: yes
    
 
# Install prereqs
- name: Installing Prerequisites for Kubernetes
  apt:
    name:
      - apt-transport-https
      - curl
      - containerd
      - nfs-common
    state: present

 
# Configure containerd
- name: Configure containerd.
  file:
    path: /etc/containerd
    state: directory

 
# Configure containerd
- name: Configure containerd.
  shell: /usr/bin/containerd config default > /etc/containerd/config.toml


# Reconfig containerd
- name: Configure Cgroup for Kubernetes
  ansible.builtin.replace:
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'


# Start containerd
- name: Enable containerd service, and start it.
  systemd:
    name: containerd
    state: restarted
    enabled: yes
    daemon-reload: yes

 
# Add kubernetes repo
- name: Add Google official GPG key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present


# Add kubernetes repo
- name: Add Kubernetes Repository
  apt_repository:
    repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
    state: present
    filename: kubernetes
    mode: 0600

 
# Install kubeadm binaries
- name: Installing Kubernetes Cluster Packages.
  apt:
    name:
    - kubeadm={{ k8s_version }}
    - kubectl={{ k8s_version }}
    - kubelet={{ k8s_version }}
    state: present


# Hold packages
- dpkg_selections: name={{ item }} selection=hold
  with_items:
    - kubeadm
    - kubectl
    - kubelet

 
# Enable kubelet
- name: Enable service kubelet, and enable persistently
  service:
    name: kubelet
    enabled: yes

 
# Reboot
- name: Reboot all the kubernetes nodes.
  reboot:
    post_reboot_delay: 60
    reboot_timeout: 80
    connect_timeout: 300
    test_command: uptime
